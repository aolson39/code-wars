//Create a dog object that has four properties and three methods

//If we list all the natural numbers below 10 that are multiples of 3 or 5,
// we get 3, 5, 6 and 9. The sum of these multiples is 23.

//Find the sum of all the multiples of 3 or 5 below 1000.

function sumOfMult(){
    let sum = 0;
    for(let i = 1; i < 1000; i++){
        if(i % 3 === 0 || i % 5 === 0){
            sum += i;
        }
    }
    return sum;
}

console.log(`sumofMult = ${sumOfMult()}`)

//Each new term in the Fibonacci sequence is generated by adding the 
//previous two terms. By starting with 1 and 2, the first 10 terms will be:

//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

//By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

function fib(){
    let a = 0,
        b = 1,
        temp,
        sum = 0;
    while(b < 4000000){
        temp = a
        a = b
        b += temp
        //check is even
        if(b % 2 === 0){
            sum += b
        }
    }
    return sum
}
console.log(`even fibs sum = ${fib()}`)


// The prime factors of 13195 are 5, 7, 13 and 29.

// What is the largest prime factor of the number 600851475143 ?

function largestPrimeFactor(num){
    //for each number less than num check if it can be divided by any number other than 1 and itself
    // 15
    //14, 13, 12, 11, 10, 9,
    // starting index (first prime)
    //200/2
    var i = 2;
    var num = 600851475143;

    while (num > i) {
        if (num % i === 0) {
            num = num / i;
        }
        i++;
    }

    return i;
}
//console.log(largestPrimeFactor(600851475143))


// A palindromic number reads the same both ways. The largest palindrome made from the product of two
//  2-digit numbers is 9009 = 91 Ã— 99.

// Find the largest palindrome made from the product of two 3-digit numbers.

// 999 X 999 = 
// 999 * 998 = 
// 999 * 997
// ....
//998 * 997
//998 * 996

function palindromeTres(){
    //counting down from 999
    let palindromes = []
    for(let i = 999; i > 0; i --){  
        for(let x = i; x > 0; x--){
            let sum = i * x
            reverse = reverseNum(sum)
            if(sum === reverse){
                palindromes.push(sum)
            }
        }
    }
    const max = palindromes.reduce(function(a, b) {
        return Math.max(a, b);
    }, -Infinity);
    return max

}
function reverseNum(n) {
    let r = n.toString().split('').reverse().join('');
    return Math.sign(n) * parseInt(r);
  }

//console.log(palindromeTres())

//2520 is the smallest number that can be divided by each of the numbers 
//from 1 to 10 without any remainder.

//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

function firstTwentyDivisors(){
    let n = 2520
    let found = false;
    while (!found){
        if(divisibleByAll(n)){
            return n
        }
        n + 20
    }

}

function divisibleByAll(num){
    let isIt = true;
    for(let i = 0; i <= 20; i++){
        if(num % i != 0){
            return false
        }
    }
}

//console.log(firstTwentyDivisors())
